{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e57d82bc",
   "metadata": {},
   "source": [
    "# GUI for Image Classification - with Keras and TensorFlow II."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7988e130",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "844037ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: keras in d:\\anaconda\\lib\\site-packages (2.11.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (d:\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -illow (d:\\anaconda\\lib\\site-packages)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tensorflow in d:\\anaconda\\lib\\site-packages (2.11.0)\n",
      "Requirement already satisfied: tensorflow-intel==2.11.0 in d:\\anaconda\\lib\\site-packages (from tensorflow) (2.11.0)\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (1.58.0)\n",
      "Requirement already satisfied: astunparse>=1.6.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (1.6.3)\n",
      "Requirement already satisfied: tensorboard<2.12,>=2.11 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (2.11.2)\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (3.3.0)\n",
      "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (0.4.0)\n",
      "Requirement already satisfied: packaging in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (21.3)\n",
      "Requirement already satisfied: h5py>=2.9.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (3.7.0)\n",
      "Requirement already satisfied: wrapt>=1.11.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (1.14.1)\n",
      "Requirement already satisfied: flatbuffers>=2.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (23.1.21)\n",
      "Requirement already satisfied: numpy>=1.20 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (1.21.5)\n",
      "Requirement already satisfied: libclang>=13.0.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (15.0.6.1)\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (4.10.0)\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (0.2.0)\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (0.30.0)\n",
      "Requirement already satisfied: termcolor>=1.1.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (2.2.0)\n",
      "Requirement already satisfied: keras<2.12,>=2.11.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (2.11.0)\n",
      "Requirement already satisfied: absl-py>=1.0.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (1.4.0)\n",
      "Requirement already satisfied: setuptools in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (63.4.1)\n",
      "Requirement already satisfied: six>=1.12.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (1.16.0)\n",
      "Requirement already satisfied: tensorflow-estimator<2.12,>=2.11.0 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (2.11.0)\n",
      "Requirement already satisfied: protobuf<3.20,>=3.9.2 in d:\\anaconda\\lib\\site-packages (from tensorflow-intel==2.11.0->tensorflow) (3.19.6)\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in d:\\anaconda\\lib\\site-packages (from astunparse>=1.6.0->tensorflow-intel==2.11.0->tensorflow) (0.37.1)\n",
      "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in d:\\anaconda\\lib\\site-packages (from tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (1.8.1)\n",
      "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in d:\\anaconda\\lib\\site-packages (from tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (0.4.6)\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in d:\\anaconda\\lib\\site-packages (from tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (2.0.3)\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in d:\\anaconda\\lib\\site-packages (from tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (2.28.1)\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in d:\\anaconda\\lib\\site-packages (from tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (2.16.1)\n",
      "Requirement already satisfied: markdown>=2.6.8 in d:\\anaconda\\lib\\site-packages (from tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (3.3.4)\n",
      "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in d:\\anaconda\\lib\\site-packages (from tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (0.6.1)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in d:\\anaconda\\lib\\site-packages (from packaging->tensorflow-intel==2.11.0->tensorflow) (3.0.9)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in d:\\anaconda\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (5.3.0)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in d:\\anaconda\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (0.2.8)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in d:\\anaconda\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (4.9)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in d:\\anaconda\\lib\\site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (1.3.1)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in d:\\anaconda\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (1.26.11)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in d:\\anaconda\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (2022.12.7)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in d:\\anaconda\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in d:\\anaconda\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (2.10)\n",
      "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in d:\\anaconda\\lib\\site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (0.4.8)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in d:\\anaconda\\lib\\site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.12,>=2.11->tensorflow-intel==2.11.0->tensorflow) (3.2.1)\n",
      "Keras installed successfully!\n"
     ]
    }
   ],
   "source": [
    "!pip install keras\n",
    "!pip install tensorflow\n",
    "from keras.models import Sequential\n",
    "print(\"Keras installed successfully!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5a81bab9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import filedialog\n",
    "import pyscreenshot  # Or import mss for advanced screenshot options\n",
    "import numpy as np\n",
    "from tensorflow.keras.models import load_model  # Assuming TensorFlow model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f2739728",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QLabel\n",
    "from PyQt5.QtGui import QPainter, QPen, QColor\n",
    "from PyQt5.QtCore import Qt, QPoint, QRect\n",
    "from PIL import ImageGrab\n",
    "import cv2\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "56b17a31",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c6b08e94",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.models.load_model(r\"C:\\Users\\User\\Downloads\\model2.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dcf3a40c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Capture the screen...\n",
      "Press q if you want to quit...\n",
      "Saved C:\\Users\\User\\Downloads\\snipp_1.jpg\n",
      "1/1 [==============================] - 0s 147ms/step\n",
      "The predicted label for the image is: id\n",
      "Capture the screen...\n",
      "Press q if you want to quit...\n",
      "Quit\n",
      "Capture the screen...\n",
      "Press q if you want to quit...\n",
      "Saved C:\\Users\\User\\Downloads\\snipp_2.jpg\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "The predicted label for the image is: id\n",
      "1/1 [==============================] - 0s 20ms/step\n",
      "The predicted label for the image is: id\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "The predicted label for the image is: id\n",
      "Capture the screen...\n",
      "Press q if you want to quit...\n",
      "Saved C:\\Users\\User\\Downloads\\snipp_3.jpg\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "The predicted label for the image is: id\n",
      "1/1 [==============================] - 0s 19ms/step\n",
      "The predicted label for the image is: id\n",
      "Capture the screen...\n",
      "Press q if you want to quit...\n",
      "Saved C:\\Users\\User\\Downloads\\snipp_4.jpg\n",
      "1/1 [==============================] - 0s 19ms/step\n",
      "The predicted label for the image is: passport\n",
      "Capture the screen...\n",
      "Press q if you want to quit...\n",
      "Saved C:\\Users\\User\\Downloads\\snipp_5.jpg\n",
      "1/1 [==============================] - 0s 20ms/step\n",
      "The predicted label for the image is: id\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "0",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3465: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "class SnippingWidget(QWidget):\n",
    "    num_snip = 0\n",
    "    is_snipping = False\n",
    "    background = True\n",
    "\n",
    "    def __init__(self, parent=None):\n",
    "        super(SnippingWidget, self).__init__()\n",
    "        self.setWindowFlags(Qt.WindowStaysOnTopHint)\n",
    "\n",
    "        root = QApplication.desktop()\n",
    "        screen_width = root.width()\n",
    "        screen_height = root.height()\n",
    "        self.setGeometry(0, 0, screen_width, screen_height)\n",
    "        self.begin = QPoint()\n",
    "        self.end = QPoint()\n",
    "\n",
    "    def start(self):\n",
    "        SnippingWidget.background = False\n",
    "        SnippingWidget.is_snipping = True\n",
    "        self.setWindowOpacity(0.3)\n",
    "        QApplication.setOverrideCursor(Qt.CrossCursor)\n",
    "        print('Capture the screen...')\n",
    "        print('Press q if you want to quit...')\n",
    "        self.show()\n",
    "\n",
    "    def paintEvent(self, event):\n",
    "        if SnippingWidget.is_snipping:\n",
    "            brush_color = QColor(128, 128, 255, 100)\n",
    "            lw = 3\n",
    "            opacity = 0.3\n",
    "        else:\n",
    "            # Reset points, so the rectangle won't show up again.\n",
    "            self.begin = QPoint()\n",
    "            self.end = QPoint()\n",
    "            brush_color = QColor(0, 0, 0, 0)\n",
    "            lw = 0\n",
    "            opacity = 0\n",
    "\n",
    "        self.setWindowOpacity(opacity)\n",
    "        qp = QPainter(self)\n",
    "        qp.setPen(QPen(Qt.black, lw))\n",
    "        qp.setBrush(brush_color)\n",
    "        rect = QRect(self.begin, self.end)\n",
    "        qp.drawRect(rect)\n",
    "\n",
    "    def keyPressEvent(self, event):\n",
    "        if event.key() == Qt.Key_Q:\n",
    "            print('Quit')\n",
    "            self.close()\n",
    "        event.accept()\n",
    "\n",
    "    def mousePressEvent(self, event):\n",
    "        self.begin = event.pos()\n",
    "        self.end = self.begin\n",
    "        self.update()\n",
    "\n",
    "    def mouseMoveEvent(self, event):\n",
    "        self.end = event.pos()\n",
    "        self.update()\n",
    "\n",
    "    def mouseReleaseEvent(self, event):\n",
    "        SnippingWidget.num_snip += 1\n",
    "        SnippingWidget.is_snipping = False\n",
    "        QApplication.restoreOverrideCursor()\n",
    "        x1 = min(self.begin.x(), self.end.x())\n",
    "        y1 = min(self.begin.x(), self.end.x())\n",
    "        x2 = max(self.begin.x(), self.end.x())\n",
    "        y2 = max(self.begin.x(), self.end.y())\n",
    "\n",
    "        self.repaint()\n",
    "        QApplication.processEvents()\n",
    "        img = ImageGrab.grab(bbox=(x1, y1, x2, y2))\n",
    "        img_np = np.array(img)\n",
    "        img_cv = cv2.cvtColor(img_np, cv2.COLOR_BGR2RGB)\n",
    "\n",
    "        # Specify the directory path to save the image\n",
    "        save_dir = r\"C:\\Users\\User\\Downloads\"\n",
    "        os.makedirs(save_dir, exist_ok=True)  # Ensure the directory exists\n",
    "\n",
    "        # Create the filename for the image\n",
    "        self.img_filename = os.path.join(save_dir, f\"snipp_{SnippingWidget.num_snip}.jpg\")\n",
    "\n",
    "        # Save the image using OpenCV\n",
    "        cv2.imwrite(self.img_filename, img_cv)\n",
    "        print(f\"Saved {self.img_filename}\")\n",
    "\n",
    "class MainApplication(QMainWindow):\n",
    "    def __init__(self):\n",
    "        super(MainApplication, self).__init__()\n",
    "\n",
    "        self.snipping_widget = SnippingWidget(self)\n",
    "        self.setup_ui()\n",
    "\n",
    "        # Load the model\n",
    "        self.model_path = r\"C:\\Users\\User\\Downloads\\model2.h5\"\n",
    "        self.model = tf.keras.models.load_model(self.model_path)\n",
    "\n",
    "        # Dictionary to map labels\n",
    "        self.label_to_int = {'passport': 0, 'id': 1}\n",
    "        self.int_to_label = {v: k for k, v in self.label_to_int.items()}\n",
    "\n",
    "    def setup_ui(self):\n",
    "        self.setWindowTitle(\"Snipping Tool\")\n",
    "        self.setGeometry(200, 200, 300, 200)\n",
    "\n",
    "        snip_button = QPushButton(\"Start Snipping\", self)\n",
    "        snip_button.clicked.connect(self.start_snipping)\n",
    "\n",
    "        result_button = QPushButton(\"Result\", self)\n",
    "        result_button.clicked.connect(self.show_result)\n",
    "\n",
    "        quit_button = QPushButton(\"Quit\", self)\n",
    "        quit_button.clicked.connect(self.close_application)\n",
    "\n",
    "        self.result_label = QLabel(\"\", self)\n",
    "\n",
    "        save_comment = QLabel(\"Automatically saved in: C:\\\\Users\\\\User\\\\Downloads\", self)\n",
    "\n",
    "        layout = QVBoxLayout()\n",
    "        layout.addWidget(snip_button)\n",
    "        layout.addWidget(result_button)\n",
    "        layout.addWidget(quit_button)\n",
    "        layout.addWidget(self.result_label)\n",
    "        layout.addWidget(save_comment)\n",
    "\n",
    "        central_widget = QWidget()\n",
    "        central_widget.setLayout(layout)\n",
    "        self.setCentralWidget(central_widget)\n",
    "\n",
    "    def start_snipping(self):\n",
    "        self.snipping_widget.start()\n",
    "\n",
    "    def show_result(self):\n",
    "        if hasattr(self.snipping_widget, 'img_filename'):\n",
    "            image_path = self.snipping_widget.img_filename\n",
    "            # Load and preprocess the image\n",
    "            image = cv2.imread(image_path)\n",
    "            image = cv2.resize(image, (28, 28))  # Resize to the same size as the training images\n",
    "            image = image.astype('float32') / 255.0  # Normalize pixel values\n",
    "            image = np.expand_dims(image, axis=0)  # Add batch dimension\n",
    "\n",
    "            # Make prediction\n",
    "            prediction = self.model.predict(image)\n",
    "            predicted_class = np.argmax(prediction, axis=1)[0]\n",
    "            predicted_label = self.int_to_label[predicted_class]\n",
    "\n",
    "            # Output the result\n",
    "            self.result_label.setText(f'The predicted label for the image is: {predicted_label}')\n",
    "            print(f'The predicted label for the image is: {predicted_label}')\n",
    "        else:\n",
    "            self.result_label.setText(\"No image to predict. Please snip an image first.\")\n",
    "            print(\"No image to predict. Please snip an image first.\")\n",
    "\n",
    "    def close_application(self):\n",
    "        self.close()\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app = QApplication(sys.argv)\n",
    "    main_app = MainApplication()\n",
    "    main_app.show()\n",
    "    sys.exit(app.exec_())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "426b8383",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b88ca9b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28dbc63c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3caf917",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27c8f126",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99029f6c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e29b7c80",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
